package HashMapHeap;

import java.util.Comparator;
import java.util.HashMap;
import java.util.PriorityQueue;
import java.util.Scanner;

public class largest_element_in_a_stream {

	static class The_Comparator implements Comparator<Integer> { 

		@Override
		public int compare(Integer o1, Integer o2) {
			// TODO Auto-generated method stub
			return o1-o2; 
		} 
	} 
	public static int[] subarraysDivByK(int[] A, int K) {
		PriorityQueue<Integer> pq = new PriorityQueue<Integer>(K,new The_Comparator());
		HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
	 	for(int i=0;i<A.length;i++)
	 	{
	 		if(pq.size()<K-1)
	 		{pq.add(A[i]);System.out.println(-1+" ");}
	 		else if(pq.peek()<A[i])
	 		{
	 			System.out.println(pq.remove());
	 			pq.add(A[i]);
	 		}
	 	}
	 	System.out.println(pq.size());
		return null;
	 }

	 public static void main(String[] args) {
	 	 Scanner scn = new Scanner(System.in);
	 	 int n = scn.nextInt();
	 	 int k = scn.nextInt();
	 	 int[] arr = new int[n];
	 	 for (int z = 0; z < n; z++) {
	 	 	 arr[z] = scn.nextInt();
	 	 }
	 	 System.out.println(subarraysDivByK(arr, k));
	 }
	 
}
